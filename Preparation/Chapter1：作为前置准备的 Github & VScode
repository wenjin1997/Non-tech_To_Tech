# Chapter 7: 纯小白入门｜作为前置准备的 Github & VScode

# ✨关于 Github

想到这篇是因为之前我一直都没有用 GitHub 的习惯，面对一个新的平台有些难以适应，而且我刚接触 GitHub 那会还觉得蛮繁复的，因为我不太了解具体的功能和一些实现的逻辑，再加上之前用惯了各种花里胡哨的被美化过的网页界面， Github 最初让我有一种不知道力往哪里使的感觉。

不过  **Github 再怎么说终究是一个工具、平台、基础设施类的产品，适应和了解功能只是暂时的**，逐渐上手后其实就没啥了。

我主要想说说几个点吧，是我觉得需要掌握的，这些会了之后其实就差不多能上手了。我觉得小白最初直接用网页版的 Github 就好，不管三七二十一先注册好，记得在想自己的用户名之前三思而后行，因为这可能和你以后拿到空投啥的息息相关，钱的事不能是小事。

后面我会写一下 GitHub 的管理，涉及到 VScode，**先说几个我遇到的觉得比较重要的  Github 的概念或者功能。**

1. 关于代码仓库（全称是 `repository` ，一般简称为 `repo`）
    
    就是在 GitHub 上放你代码的地方。可以想象，你之后会写很多的代码，但是这些代码/文件需要地方保存，而且他们的归属也不尽相同，有些涉及特定的项目，仓库的存在有助于你更好的管理你的代码，也方便 Fork 别人的代码。
    
2. `Fork` 功能：超级重要！为啥呢？俗话说，站在巨人的肩膀上才能看得更高更远，如果有大佬已经把香喷喷的肉放到你的嘴巴，只要你用叉子叉一下就能享受到，你吃不吃呢？当然吃啦！不吃是傻子。
    1. Fork （谐音：复刻）就是这样的存在，相当于是把别人已经煮好的肉（仓库/代码）也给你自己拷贝一份；
    2. 而且你还能通过 `issue` 功能，和大佬反馈这份肉究竟如何，是咸了还是淡了，哪里不熟……
    3. 不仅如此，你还可以通过 `pull requst` 和这个烤肉的大佬一起烹调，他如果觉得你烤出来的肉足够美味，会把你 fork 出来的仓库并入他的仓库，让你也成为别人眼中的烤肉大佬。
3. `git clone` 也是我觉得外行人不懂，但是熟悉的人觉得是基操的点。它在安装应用的时候频繁出现，这是因为懂点代码的人可以直接通过输入 `git clone` 这个命令行直接在电脑的终端（就是一个页面但里面是黑色背景板，出来就是代码的命令的那个）里下载应用，比如电脑下载微信或者是其他应用，不懂代码、不会 `git clone` 的小白是找到微信的官网点击下载电脑系统对应的版本，而会 `git clone` 的就找到微信在 Github 上对应的下载地址，直接 `git clone` 了。
4. `commit` 是我觉得也比较重要的一个概念， 其实就是「提交代码」的意思，它某种程度上成为了衡量一个开发是否是技术大牛以及有多少贡献度的指标。在 web3 会有比较多项目的空投，一些项目方会依旧开发者给哪些 `repo` `commit` 过代码来作为筛选和评判条件。以及，自己 `commit` 代码对于一个开发来说，是最基本也是要坚守的准线，web3 尤其。

我觉得主要就是这几个功能吧，其他的也有，但我觉得我目前也没完全玩明白呢，会这几个关键的我觉得也差不多，后面的有需要自己就能逐渐摸索到了。

# 💻 Github 的管理：VS code （Visual Studio Code ）

## 写在前面

说到 Github 的管理其实我走了很多弯路，为啥呢？

**首先，一开始我有点不太会用 Github**，外加没有当时没有很强的驱动力去学习如何使用 Github ，导致我有一段时间都是在瞎忙活，中间卡了比较久。

**其次，真的是不知道 Github 最好还是有个管理工具**。我一开始以为 Github 只需要在网页端操作即可，但第一次 Fork 完别人的仓库，想要在仓库里创建文件的时候纠结了很久，因为不知道如何在网页版的 Github 仓库里添加文件，当然最后也是找搜索引擎解决的（555 我的 GPT 老师没办法理解我的意思）。如果要在网页端的文件夹里创建文件夹，是需要在创建的时候插入 `\` 这个符号的，具体可以问 GPT 老师或者搜索引擎，这里不做赘述了。

反正就是因为添加文件这件事和 GPT 老师对话，对话中知道了 VS code 可以管理 Github 上的代码，我才知道原来 VS code 那么香，怪不得我们办公室的小哥和老师们也用这个😢，我到底是错过了多久！前不久我才安装了 VS code，并且确实觉得，我靠，爽，尤其是在导入新内容的时候。大家可以在注册完 Github 之后就直接用 VS code 进行代码管理，非常不错😌。

## 一丢丢废话

希望看到此文的小白朋友们别走我的弯路，吸取经验教训。

另外就是，自己上手实操感受一下，我觉得对于功能的理解会更深刻，希望工具是帮助大家更好发挥、提高效率的助推剂，而非阻碍你进步的绊脚石。